// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use "@angular/material" as mat;
@import "variables";

:root {
	--theme: $theme;
}

.light-theme {
	@include mat.all-component-themes($theme);
}

/* You can add global styles to this file, and also import other style files */

html,
body {
	height: 100%;
}
body {
	margin: 0;
	font-family: Roboto, "Helvetica Neue", sans-serif;
}
h1,
h2,
h3 {
	margin: 0;
}

.login-form {
	display: flex;
	flex-direction: column;
	align-items: stretch;
	width: 100%;
	margin-bottom: 1em;
}

.login-form mat-form-field {
	margin-bottom: 10px;
}

.button-and-text {
	display: flex;
	gap: 1em;
	align-items: center;
	justify-content: center;
}

html,
body {
	height: 100%;
	width: 100%;
}
body {
	margin: 0;
	font-family: Roboto, "Helvetica Neue", sans-serif;
	background-color: mat.get-theme-color($theme, surface);
}

h1 {
	font: mat.get-theme-typography($theme, headline-large, font);
}
h2 {
	font: mat.get-theme-typography($theme, headline-medium, font);
}
h3 {
	font: mat.get-theme-typography($theme, headline-small, font);
}

.secondary {
	@include mat.form-field-color($theme, $color-variant: secondary);
	@include mat.button-color($theme, $color-variant: secondary);
}

header {
	display: flex;
	justify-content: space-between;
	align-items: center;
	padding: 10px;
}

.surface-container {
	background-color: mat.get-theme-color($theme, surface-container-high);
	color: mat.get-theme-color($theme, on-surface);
}

.primary-container {
	background-color: mat.get-theme-color($theme, primary-container);
	color: mat.get-theme-color($theme, on-primary-container);
	padding: 20px;
	width: calc(100% - 60px);
	max-width: 600px;
	border-radius: 20px;
}

.container-outline {
	border: 1px solid;
	border-color: mat.get-theme-color($theme, outline);
}

.dialog-panel {
	min-height: 80vh;
	width: 100vw;
	max-width: 600px !important;
}

@media only screen and (max-width: 600px) {
	.dialog-panel {
		--mdc-dialog-container-shape: 0px;
		height: 100vh;
	}
}

input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
	-webkit-appearance: none;
	margin: 0;
}

/* Firefox */
input[type="number"] {
	-moz-appearance: textfield;
	appearance: textfield;
}

.cdk-drag-preview {
	box-sizing: border-box;
	box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),
		0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12);
}

.cdk-drag-placeholder {
	opacity: 0;
}

.cdk-drag-animating {
	transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

.drag-drop-item:last-child {
	border: none;
}

.drag-drop-container.cdk-drop-list-dragging
	.drag-drop-item:not(.cdk-drag-placeholder) {
	transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);
}

.edit-question-form {
	display: flex;
	flex-direction: column;
	width: 100%;
}

.edit-question-buttons {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	flex-grow: 1;
}

.edit-question-form section {
	display: flex;
	flex-direction: column;
	align-items: stretch;
	margin: 0px 20px;
}

.question-display {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: space-around;
	height: 100%;
}

.fraction {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	margin: 0px 10px;
}

.fraction hr {
	width: 100%;
	border: none;
	border-top: 2px solid black;
}
